package asj9469.CleanerRevTool;

import chrriis.dj.nativeswing.swtimpl.NativeInterface;
import java.awt.Font;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import asj9469.CleanerRevTool.ActiveMethods;
import static asj9469.CleanerRevTool.BackgroundMethods.createContent;
import com.formdev.flatlaf.intellijthemes.*;
import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatAtomOneDarkIJTheme;
import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatGitHubDarkIJTheme;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import org.drjekyll.fontchooser.FontDialog;
import org.drjekyll.fontchooser.model.FontSelectionModel;

//SWT libraries


public class JFrameUI extends javax.swing.JFrame {
          
    JButton addButton;
    
    public JFrameUI() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        JPanel newBrowserPanel = new JPanel(new BorderLayout());
        createContent(newBrowserPanel);
        splitPane.remove(2);
        splitPane.add(newBrowserPanel, 2);
        
        
//        //add tab button        
//        addButton = new JButton("+");
//        addButton.setBorder(null);
//        addButton.setFocusPainted(false);
//        addButton.setContentAreaFilled(false);
//        addButton.setPreferredSize(new Dimension(30, 30));
//        addButton.addActionListener(new ActionListener() {
//
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                
//                BackgroundMethods.openBrowser(tabbedPanes, addButton);
//                
//            }
//
//        });
//
//        tabbedPanes.setTabComponentAt(tabbedPanes.getTabCount()-1, addButton);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        findWindow = new javax.swing.JDialog();
        searchButton = new javax.swing.JButton();
        leftButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        searchBar = new javax.swing.JTextField();
        splitPane = new javax.swing.JSplitPane();
        tabbedPanes = new javax.swing.JTabbedPane();
        textEditorPanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        enterRemover = new javax.swing.JButton();
        paraBox = new javax.swing.JComboBox<>();
        translateButton = new javax.swing.JButton();
        browserPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openBrowser = new javax.swing.JMenuItem();
        openItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        findButton = new javax.swing.JMenuItem();
        fontItem = new javax.swing.JMenuItem();

        findWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        findWindow.setTitle("Find");
        findWindow.setAlwaysOnTop(true);
        findWindow.setMinimumSize(new java.awt.Dimension(420, 90));
        findWindow.setResizable(false);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        leftButton.setText("<");
        leftButton.setMaximumSize(new java.awt.Dimension(30, 30));
        leftButton.setMinimumSize(new java.awt.Dimension(30, 30));
        leftButton.setPreferredSize(new java.awt.Dimension(30, 30));
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });

        rightButton.setText(">");
        rightButton.setMaximumSize(new java.awt.Dimension(30, 30));
        rightButton.setMinimumSize(new java.awt.Dimension(30, 30));
        rightButton.setPreferredSize(new java.awt.Dimension(30, 30));
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });

        searchBar.setText("Find");
        searchBar.setSelectionColor(new java.awt.Color(253, 123, 104));
        searchBar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                searchBarPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout findWindowLayout = new javax.swing.GroupLayout(findWindow.getContentPane());
        findWindow.getContentPane().setLayout(findWindowLayout);
        findWindowLayout.setHorizontalGroup(
            findWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(leftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        findWindowLayout.setVerticalGroup(
            findWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(findWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(leftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Translating Tool (Beta)");

        splitPane.setDividerLocation(450);
        splitPane.setAutoscrolls(true);
        splitPane.setOneTouchExpandable(true);

        tabbedPanes.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tabbedPanes.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tabbedPanesPropertyChange(evt);
            }
        });

        scrollPane.setBorder(null);

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Consolas_Dream", 0, 18)); // NOI18N
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        textArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textArea.setDragEnabled(true);
        textArea.setName(""); // NOI18N
        textArea.setSelectionColor(new java.awt.Color(62, 68, 81));
        textArea.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                textAreaPropertyChange(evt);
            }
        });
        scrollPane.setViewportView(textArea);

        enterRemover.setText("Remove Enters");
        enterRemover.setFocusPainted(false);
        enterRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterRemoverActionPerformed(evt);
            }
        });

        paraBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "4 per paragraph", "5 per paragraph", "6 per paragraph", "7 per paragraph", "8 per paragraph" }));
        paraBox.setSelectedIndex(2);
        paraBox.setSelectedItem(2);
        paraBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paraBoxActionPerformed(evt);
            }
        });

        translateButton.setText("Translate");
        translateButton.setFocusPainted(false);
        translateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                translateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout textEditorPanelLayout = new javax.swing.GroupLayout(textEditorPanel);
        textEditorPanel.setLayout(textEditorPanelLayout);
        textEditorPanelLayout.setHorizontalGroup(
            textEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textEditorPanelLayout.createSequentialGroup()
                .addGroup(textEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, textEditorPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(enterRemover)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paraBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(translateButton)))
                .addContainerGap())
        );
        textEditorPanelLayout.setVerticalGroup(
            textEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textEditorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(textEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterRemover)
                    .addComponent(paraBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(translateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))
        );

        tabbedPanes.addTab("Text Editor", textEditorPanel);

        splitPane.setLeftComponent(tabbedPanes);
        tabbedPanes.getAccessibleContext().setAccessibleName("tabbedPane");
        tabbedPanes.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout browserPanelLayout = new javax.swing.GroupLayout(browserPanel);
        browserPanel.setLayout(browserPanelLayout);
        browserPanelLayout.setHorizontalGroup(
            browserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        browserPanelLayout.setVerticalGroup(
            browserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 470, Short.MAX_VALUE)
        );

        splitPane.setRightComponent(browserPanel);

        fileMenu.setText("File");

        openBrowser.setText("Open Browser");
        openBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBrowserActionPerformed(evt);
            }
        });
        fileMenu.add(openBrowser);

        openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openItem.setText("Open");
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        fileMenu.add(openItem);

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveItem.setText("Save");
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);

        exitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        findButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        findButton.setText("Find");
        findButton.setActionCommand("findWord");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });
        editMenu.add(findButton);

        fontItem.setText("Font");
        fontItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontItemActionPerformed(evt);
            }
        });
        editMenu.add(fontItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textAreaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textAreaPropertyChange
        
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        BackgroundMethods.undoManager(textArea);
        
        
//        try {
//            Font customFont = Font.createFont(Font.TRUETYPE_FONT, JFrameUI.class.getResourceAsStream("/a드림고딕4.otf")).deriveFont(15f);
//            textArea.setFont(customFont);
//        } catch (FontFormatException ex) {
//            Logger.getLogger(JFrameUI.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(JFrameUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
        
    }//GEN-LAST:event_textAreaPropertyChange

    
    private void paraBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paraBoxActionPerformed
        //java regex pattern stuff to distinguish end of sentence
        Pattern re = Pattern.compile("[^.!?\\s][^.!?]*(?:[.!?](?!['\"]?\\s|$)[^.!?]*)*[.!?]?['\"]?(?=\\s|$)", Pattern.MULTILINE | Pattern.COMMENTS);
        Matcher reMatcher = re.matcher(textArea.getText());
        textArea.setText("");
        while (reMatcher.find()) {
            textArea.append(reMatcher.group() + "\n");
        }

        //if there is a mistake with titles, remove the enters between the sentences
        ArrayList<String> titles = new ArrayList<String>();

        titles.add("Prof.");
        titles.add("Dr.");
        titles.add("Mr.");
        titles.add("Mrs.");
        titles.add("Ms.");
        titles.add("etc.");

        for (int i = 0; i < titles.size(); i++) {

            if (textArea.getText().contains(titles.get(i))) {

                String text = textArea.getText();
                text = text.replaceAll(titles.get(i) + "\n", titles.get(i) + " ");
                textArea.setText(text);
            }
        }

        //get every index of where \n is, count, and replace certain ones with a space to satisfy the split paragraph
        char[] textChar = textArea.getText().toCharArray();
        int counter = 0;
        for (int i = textArea.getText().indexOf("\n"); i >= 0; i = textArea.getText().indexOf("\n", i + 1)) {

            if (counter != (paraBox.getSelectedIndex() + 3)) {

                textChar[i] = ' ';
                textArea.setText(String.valueOf(textChar));
                counter++;

            } else {
                counter = 0;
            }
        }
        
        String text = textArea.getText();
        if(text.substring(text.length()-1) != "\n"){
            text += "\n";
            textArea.setText(text);
        }
        

    }//GEN-LAST:event_paraBoxActionPerformed

    private void enterRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterRemoverActionPerformed
        enterRemover.setBackground(new Color(78,80,82));
        String text = textArea.getText();
        text = text.replaceAll("[\\n]", " ");
        text = text.replaceAll("  ", " ");
        textArea.setText(text);
    }//GEN-LAST:event_enterRemoverActionPerformed

    private void translateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_translateButtonActionPerformed
            
        
        //Make an arraylist to store all the index of the \ns
        ArrayList<Integer> index = new ArrayList<Integer>();
        ArrayList<String> textBlocks = new ArrayList<String>();
        for (int i = textArea.getText().indexOf("\n"); i > 0; i = textArea.getText().indexOf("\n", i + 1)) {
            index.add(i);
        }
        
        index.add(0, 0);
        if (index.get(index.size() - 1) != textArea.getText().length() - 1) {
            index.add(textArea.getText().length() - 1);
        }

        for (int i = index.size() - 1; i >= 0; i--) {
            String text = textArea.getText();
            String translatedText;
            try {
                translatedText = ActiveMethods.insertTranslate(text, index.get(i), index.get(i - 1), index.get(i));
                textArea.setText(translatedText);
            } catch (IOException ex) {
                Logger.getLogger(ActiveMethods.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
        
    }//GEN-LAST:event_translateButtonActionPerformed

    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("C:\\Users\\ghs05\\!School & Professional\\REV"));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt");
        fileChooser.setFileFilter(filter);

        int response = fileChooser.showOpenDialog(null);

        if (response == JFileChooser.APPROVE_OPTION) {
            File file = new File(fileChooser.getSelectedFile().getAbsolutePath());
            Scanner fileIn = null;

            try {
                fileIn = new Scanner(file);
                if (file.isFile()) {
                    while (fileIn.hasNextLine()) {
                        String line = fileIn.nextLine() + "\n";
                        textArea.append(line);
                    }
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ActiveMethods.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                fileIn.close();
            }
        }
    }//GEN-LAST:event_openItemActionPerformed

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File("C:\\Users\\ghs05\\!School & Professional\\REV"));
            
            int response = fileChooser.showSaveDialog(null);
            
            if(response == JFileChooser.APPROVE_OPTION){
                File file;
                PrintWriter fileOut = null;
                
                file  = new File(fileChooser.getSelectedFile().getAbsolutePath());
                try {
                    fileOut = new PrintWriter(file);
                    fileOut.println(textArea.getText());
                } 
                catch (FileNotFoundException ex) {
                    Logger.getLogger(ActiveMethods.class.getName()).log(Level.SEVERE, null, ex);
                } 
                finally{
                    fileOut.close();
                }
                
            }
    }//GEN-LAST:event_saveItemActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void fontItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontItemActionPerformed
        
        FontDialog fontChooser = new FontDialog((Frame) null, "Font Chooser", true);
        fontChooser.setMinimumSize(new java.awt.Dimension(550, 400));
        fontChooser.setResizable(false);
        fontChooser.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        fontChooser.setLocationRelativeTo(null);
        fontChooser.setVisible(true);
        
        if (!fontChooser.isCancelSelected()){

            Font font = fontChooser.getSelectedFont(); 
            textArea.setFont(font);
        }
    }//GEN-LAST:event_fontItemActionPerformed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed

        findWindow.setVisible(true);
        findWindow.setLocationRelativeTo(null);
//        
//        UIManager.put("OptionPane.cancelButtonText", "Close");
//        UIManager.put("OptionPane.okButtonText", "Next");
//        
//        String wordToFind = (String) JOptionPane.showInputDialog(null, null, "Find", JOptionPane.PLAIN_MESSAGE, null, null, null);
//        ActiveMethods.findAndSelectString(textArea, wordToFind);
    }//GEN-LAST:event_findButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String wordToFind = searchBar.getText();
        BackgroundMethods.highlight(textArea, wordToFind);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rightButtonActionPerformed

    private void searchBarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_searchBarPropertyChange
        UIManager.put("TextComponent.arc", 10);
        UIManager.put( "Component.focusWidth", 0 );
        
        findWindow.addWindowListener(new WindowAdapter() {
	public void windowClosing(WindowEvent we) {
		textArea.getHighlighter().removeAllHighlights();
	}
    });
    }//GEN-LAST:event_searchBarPropertyChange

    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_leftButtonActionPerformed

    private void openBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBrowserActionPerformed
       
        BackgroundMethods.openBrowser(tabbedPanes, addButton);
    }//GEN-LAST:event_openBrowserActionPerformed

    private void tabbedPanesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tabbedPanesPropertyChange
        UIManager.put( "TabbedPane.showTabSeparators", true );
    }//GEN-LAST:event_tabbedPanesPropertyChange
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        NativeInterface.open();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(JFrameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(JFrameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(JFrameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(JFrameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>
        //</editor-fold>
        
        //manage FlatLaf UI
        //FlatAtomOneDarkIJTheme.setup();
        try {
            UIManager.setLookAndFeel(new FlatAtomOneDarkIJTheme());
        } catch (UnsupportedLookAndFeelException ex) {
            System.err.println("Failed to initialize LaF");
        }
        UIManager.put( "Button.arc", 10 );
        UIManager.put("Component.arc", 10);
        UIManager.put( "TextComponent.arc", 10);
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                try {

                    Font customFont = Font.createFont(Font.TRUETYPE_FONT, JFrameUI.class.getResourceAsStream("/a드림고딕4.otf")).deriveFont(14f);
                    ActiveMethods.setUIFont(customFont);

                } catch (FontFormatException ex) {
                    Logger.getLogger(JFrameUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(JFrameUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
                new JFrameUI().setVisible(true);
            }
            
        });
        
        NativeInterface.runEventPump();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel browserPanel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton enterRemover;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem findButton;
    private javax.swing.JDialog findWindow;
    private javax.swing.JMenuItem fontItem;
    private javax.swing.JButton leftButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openBrowser;
    private javax.swing.JMenuItem openItem;
    private javax.swing.JComboBox<String> paraBox;
    private javax.swing.JButton rightButton;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTabbedPane tabbedPanes;
    private javax.swing.JTextArea textArea;
    private javax.swing.JPanel textEditorPanel;
    private javax.swing.JButton translateButton;
    // End of variables declaration//GEN-END:variables
}
